//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ld52/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Truck"",
            ""id"": ""1cc18c69-a97e-4226-876c-c7f238d6fa34"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ba118757-2b0f-4960-a5a2-91a0cb64b3bf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""34fca312-c905-4da8-856a-f65d9d627530"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowBoomerang"",
                    ""type"": ""Button"",
                    ""id"": ""c9651b46-09d5-4ba6-8917-c9c8c7f9e82b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""A/D"",
                    ""id"": ""c0d19db4-0c80-490f-8e73-4d3ea2d20b33"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a2d2b0d0-eac4-4a97-8414-ff00864c7470"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1f01b55b-af71-4778-8ccc-e2e7d00c9efd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""7d3106b3-6c70-4b5b-b19c-b250738e7305"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7a9e83b8-6b49-4b09-99d3-439e0b44e0c5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7a4db78d-beea-4997-bf0e-d04b7686ed17"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b594007-41b6-4373-b95d-5befc90ec30a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d34da3eb-7271-415b-b2e3-91f901d93562"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowBoomerang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TitleScreen"",
            ""id"": ""6e613f1e-f18a-42dd-9af0-ae55c1a0a960"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""a8ff7e25-9c36-4dd0-9227-923972257b1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""938002b6-5506-44de-9f06-997f7d426481"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac3184ba-affc-4217-a1cc-d03b79443548"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Truck
        m_Truck = asset.FindActionMap("Truck", throwIfNotFound: true);
        m_Truck_Drive = m_Truck.FindAction("Drive", throwIfNotFound: true);
        m_Truck_Look = m_Truck.FindAction("Look", throwIfNotFound: true);
        m_Truck_ThrowBoomerang = m_Truck.FindAction("ThrowBoomerang", throwIfNotFound: true);
        // TitleScreen
        m_TitleScreen = asset.FindActionMap("TitleScreen", throwIfNotFound: true);
        m_TitleScreen_Play = m_TitleScreen.FindAction("Play", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Truck
    private readonly InputActionMap m_Truck;
    private ITruckActions m_TruckActionsCallbackInterface;
    private readonly InputAction m_Truck_Drive;
    private readonly InputAction m_Truck_Look;
    private readonly InputAction m_Truck_ThrowBoomerang;
    public struct TruckActions
    {
        private @PlayerInput m_Wrapper;
        public TruckActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_Truck_Drive;
        public InputAction @Look => m_Wrapper.m_Truck_Look;
        public InputAction @ThrowBoomerang => m_Wrapper.m_Truck_ThrowBoomerang;
        public InputActionMap Get() { return m_Wrapper.m_Truck; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TruckActions set) { return set.Get(); }
        public void SetCallbacks(ITruckActions instance)
        {
            if (m_Wrapper.m_TruckActionsCallbackInterface != null)
            {
                @Drive.started -= m_Wrapper.m_TruckActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_TruckActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_TruckActionsCallbackInterface.OnDrive;
                @Look.started -= m_Wrapper.m_TruckActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_TruckActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_TruckActionsCallbackInterface.OnLook;
                @ThrowBoomerang.started -= m_Wrapper.m_TruckActionsCallbackInterface.OnThrowBoomerang;
                @ThrowBoomerang.performed -= m_Wrapper.m_TruckActionsCallbackInterface.OnThrowBoomerang;
                @ThrowBoomerang.canceled -= m_Wrapper.m_TruckActionsCallbackInterface.OnThrowBoomerang;
            }
            m_Wrapper.m_TruckActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ThrowBoomerang.started += instance.OnThrowBoomerang;
                @ThrowBoomerang.performed += instance.OnThrowBoomerang;
                @ThrowBoomerang.canceled += instance.OnThrowBoomerang;
            }
        }
    }
    public TruckActions @Truck => new TruckActions(this);

    // TitleScreen
    private readonly InputActionMap m_TitleScreen;
    private ITitleScreenActions m_TitleScreenActionsCallbackInterface;
    private readonly InputAction m_TitleScreen_Play;
    public struct TitleScreenActions
    {
        private @PlayerInput m_Wrapper;
        public TitleScreenActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_TitleScreen_Play;
        public InputActionMap Get() { return m_Wrapper.m_TitleScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TitleScreenActions set) { return set.Get(); }
        public void SetCallbacks(ITitleScreenActions instance)
        {
            if (m_Wrapper.m_TitleScreenActionsCallbackInterface != null)
            {
                @Play.started -= m_Wrapper.m_TitleScreenActionsCallbackInterface.OnPlay;
                @Play.performed -= m_Wrapper.m_TitleScreenActionsCallbackInterface.OnPlay;
                @Play.canceled -= m_Wrapper.m_TitleScreenActionsCallbackInterface.OnPlay;
            }
            m_Wrapper.m_TitleScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Play.started += instance.OnPlay;
                @Play.performed += instance.OnPlay;
                @Play.canceled += instance.OnPlay;
            }
        }
    }
    public TitleScreenActions @TitleScreen => new TitleScreenActions(this);
    public interface ITruckActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnThrowBoomerang(InputAction.CallbackContext context);
    }
    public interface ITitleScreenActions
    {
        void OnPlay(InputAction.CallbackContext context);
    }
}
